require(BBmisc)
std.indep.data.update<-normalize(indep.data.update[c(3:40)],method="standardize",range=c(0,1),margin=1L,on.constant="quiet")
std.indep.data.update[is.na(std.indep.data.update)]<-0
std.indep.data.cat<-cbind(std.indep.data.update,region.cat %>% select(cat))
std.indep.data.bin<-cbind(std.indep.data.update,region.cat %>% select(-LTLA19CD,-REG_NM,-CLU))
std.indep.data
std.indep.data.cat
std.indep.data.bin
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
##Model fitting #1 ref
lasso.fit.re<-glmnet(x.update.cat,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
plot(lasso.cvfit.re)
coef.g1<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G1'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@x,group="G1")
coef.g2<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G2'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@x,group="G2")
coef.g3<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G3'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@x,group="G3")
coef.g4<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G4'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@x,group="G4")
coef.all<-union_all(coef.g1,coef.g2);coef.all<-union_all(coef.all,coef.g3);coef.all<-union_all(coef.all,coef.g4)
coef.all$name<-factor(coef.all$name)
levels(coef.all$name)
x.update.cat
lasso.fit
##Model fitting #1 ref
lasso.fit.re<-glmnet(x.update.cat,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
plot(lasso.cvfit.re)
coef.g1<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G1'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@x,group="G1")
coef.g2<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G2'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@x,group="G2")
coef.g3<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G3'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@x,group="G3")
coef.g4<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G4'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@x,group="G4")
coef.all<-union_all(coef.g1,coef.g2);coef.all<-union_all(coef.all,coef.g3);coef.all<-union_all(coef.all,coef.g4)
coef.all$name<-factor(coef.all$name)
coef.all
region.cat$cat<-factor(region.cat$cat)
std.indep.data.cat<-cbind(std.indep.data.update,region.cat %>% select(cat))
std.indep.data.bin<-cbind(std.indep.data.update,region.cat %>% select(-LTLA19CD,-REG_NM,-CLU))
##Scale the independent variable
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
require(BBmisc)
std.indep.data.update<-normalize(indep.data.update[c(3:40)],method="standardize",range=c(0,1),margin=1L,on.constant="quiet")
std.indep.data.update[is.na(std.indep.data.update)]<-0
region.cat$cat<-factor(region.cat$cat)
std.indep.data.cat<-cbind(std.indep.data.update,region.cat %>% select(cat))
std.indep.data.bin<-cbind(std.indep.data.update,region.cat %>% select(-LTLA19CD,-REG_NM,-CLU))
##Scale the independent variable
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
##Model fitting #1 ref
lasso.fit.re<-glmnet(x.update.cat,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
region.cat$cat<-factor(region.cat$cat)
std.indep.data.cat<-cbind(std.indep.data.update,region.cat %>% select(cat))
std.indep.data.bin<-cbind(std.indep.data.update,region.cat %>% select(-LTLA19CD,-REG_NM,-CLU,-cat))
##Scale the independent variable
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
##Model fitting #1 ref
lasso.fit.re<-glmnet(x.update.cat,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
##Model fitting #1 ref
lasso.fit.re<-glmnet(x.update.bin,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
coef.g4<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G4'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@x,group="G4")
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
##Model fitting #1 ref
lasso.fit.re<-glmnet(x.update.bin,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
##Scale the independent variable
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
##Model fitting #1 ref
lasso.fit.re<-glmnet(x.update.bin,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.bin, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
plot(lasso.cvfit.re)
coef.g1<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G1'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@x,group="G1")
coef.g2<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G2'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@x,group="G2")
coef.g3<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G3'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@x,group="G3")
coef.g4<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G4'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@x,group="G4")
coef.all<-union_all(coef.g1,coef.g2);coef.all<-union_all(coef.all,coef.g3);coef.all<-union_all(coef.all,coef.g4)
coef.all$name<-factor(coef.all$name)
levels(coef.all$name)
coef.g11
coef.g1
coef.g2
coef.g3
coef.g5
coef.g4
lasso.cvfit.re <- cv.glmnet(x.update.bin, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
plot(lasso.cvfit.re)
lasso.cifit.re
lasso.cvfit.re
lasso.cvfit.re$glmnet.fit
lasso.cvfit.re <- cv.glmnet(x.update.bin, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
lasso.cvfit.re <- cv.glmnet(x.update.bin, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
plot(lasso.cvfit.re)
coef.g1<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G1'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@x,group="G1")
coef.g2<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G2'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@x,group="G2")
coef.g3<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G3'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@x,group="G3")
coef.g4<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G4'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@x,group="G4")
coef.all<-union_all(coef.g1,coef.g2);coef.all<-union_all(coef.all,coef.g3);coef.all<-union_all(coef.all,coef.g4)
coef.all$name<-factor(coef.all$name)
coef.all
?cv.glmnet
x.update.bin
summary(std.indep.data.bin)
region.cat<-st_drop_geometry(ltla) %>% dplyr::select(LTLA19CD,REG_NM,CLU) %>% dplyr::ungroup()
region.cat$REG_NM<-factor(region.cat$REG_NM)
levels(region.cat$REG_NM)<-c("4","6","7","1","2","8","9","5","3")
region.cat$cat<-as.numeric(region.cat$REG_NM)
region.cat$bi.01[region.cat$REG_NM=="North East"]<-1
region.cat$bi.02[region.cat$REG_NM=="North West"]<-1
region.cat$bi.03[region.cat$REG_NM=="Yorkshire and The Humber"]<-1
region.cat$bi.04[region.cat$REG_NM=="East Midlands"]<-1
region.cat$bi.05[region.cat$REG_NM=="West Midlands"]<-1
region.cat$bi.06[region.cat$REG_NM=="East of England"]<-1
region.cat$bi.07[region.cat$REG_NM=="London"]<-1
region.cat$bi.08[region.cat$REG_NM=="South East"]<-1
region.cat$bi.09[region.cat$REG_NM=="South West"]<-1
region.cat[is.na(region.cat)]<-0
summary(region.cat$bi.09)
region.cat<-st_drop_geometry(ltla) %>% dplyr::select(LTLA19CD,REG_NM,CLU) %>% dplyr::ungroup()
region.cat$REG_NM<-factor(region.cat$REG_NM)
region.cat$bi.01[region.cat$REG_NM=="North East"]<-1
region.cat$bi.02[region.cat$REG_NM=="North West"]<-1
region.cat$bi.03[region.cat$REG_NM=="Yorkshire and The Humber"]<-1
region.cat$bi.04[region.cat$REG_NM=="East Midlands"]<-1
region.cat$bi.05[region.cat$REG_NM=="West Midlands"]<-1
region.cat$bi.06[region.cat$REG_NM=="East of England"]<-1
region.cat$bi.07[region.cat$REG_NM=="London"]<-1
region.cat$bi.08[region.cat$REG_NM=="South East"]<-1
region.cat$bi.09[region.cat$REG_NM=="South West"]<-1
levels(region.cat$REG_NM)<-c("4","6","7","1","2","8","9","5","3")
region.cat$cat<-as.numeric(region.cat$REG_NM)
region.cat[is.na(region.cat)]<-0
region.cat
##Scale the independent variable
y=as.matrix(ltla$CLU)
std.indep.data.cat<-cbind(std.indep.data,region.cat %>% select(cat()))
std.indep.data.bin<-cbind(std.indep.data,region.cat %>% select(-LTLA19CD,-REG_NM,-CLU))
x=as.matrix(std.indep.data)
x.cat=as.matrix(std.indep.data.cat)
x.bin=as.matrix(std.indep.data.bin)
indep.data<-indep.data[order(indep.data$LTLA19CD),]
indep.data.update<-left_join(indep.data,input.eigen.before.en.ep.data[c(1:2,11:12)],by=c("LTLA19CD","LTLA19NM"))
std.indep.data.update<-as.data.frame(as.data.frame(scale(indep.data.update[c(3:40)])))
require(BBmisc)
std.indep.data.update<-normalize(indep.data.update[c(3:40)],method="standardize",range=c(0,1),margin=1L,on.constant="quiet")
std.indep.data.update[is.na(std.indep.data.update)]<-0
region.cat$cat<-factor(region.cat$cat)
std.indep.data.cat<-cbind(std.indep.data.update,region.cat %>% select(cat))
std.indep.data.bin<-cbind(std.indep.data.update,region.cat %>% select(-LTLA19CD,-REG_NM,-CLU,-cat))
##Scale the independent variable
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
x.update.cat
x.update.bin
std.indep.data.cat$cat<-factor(std.indep.data.cat$cat)
std.indep.data.bin<-cbind(std.indep.data.update,region.cat %>% select(-LTLA19CD,-REG_NM,-CLU,-cat))
##Scale the independent variable
y=as.matrix(ltla$CLU)
x.update=as.matrix(std.indep.data.update)
x.update.cat=as.matrix(std.indep.data.cat)
x.update.bin=as.matrix(std.indep.data.bin)
lasso.fit.re<-glmnet(x.update.cat,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.bin, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
plot(lasso.cvfit.re)
coef.g1<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G1'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@x,group="G1")
coef.g2<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G2'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@x,group="G2")
coef.g3<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G3'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@x,group="G3")
coef.g4<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G4'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@x,group="G4")
coef.all<-union_all(coef.g1,coef.g2);coef.all<-union_all(coef.all,coef.g3);coef.all<-union_all(coef.all,coef.g4)
coef.all$name<-factor(coef.all$name)
coef.all
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
lasso.fit.re<-glmnet(x.update.bin,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.fit.re<-glmnet(x.update.bin,y,family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", nfolds=10) #trace.it = TRUE)
plot(lasso.fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
#Graphical parameters showing the ℓ2-norm in one figur
best_lambda_lasso<-min(lasso.fit$lambda)
lasso.cvfit.re <- cv.glmnet(x.update.cat, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
lasso.cvfit.re <- cv.glmnet(x.update.bin, y, family = "multinomial", alpha=1, standardise=FALSE, type.multinomial = "ungrouped", type.measure="mse",nfolds=10)
plot(lasso.cvfit.re)
coef.g1<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G1'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G1'@x,group="G1")
coef.g2<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G2'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G2'@x,group="G2")
coef.g3<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G3'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G3'@x,group="G3")
coef.g4<-data.frame(name = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@Dimnames[[1]][coef(lasso.cvfit.re, s = "lambda.min")$'G4'@i + 1], coefficient = coef(lasso.cvfit.re, s = "lambda.min")$'G4'@x,group="G4")
coef.all<-union_all(coef.g1,coef.g2);coef.all<-union_all(coef.all,coef.g3);coef.all<-union_all(coef.all,coef.g4)
coef.all
coef.all$name<-factor(coef.all$name)
levels(coef.all$name)
indep.data
names(iundep.data)
names(indep.data)
levels(coef.all$name)
levels(coef.all$name)<-c("Constant","North East","Yorkshire and the Humber","East Midlands","West Midlands",
"East of England","London","South West","Cum. COVID-19 infection rates","Cum. COVID-19 moratlity rates", "%African","%Caribbean","%Other Asian","%Hospitals","%High income HHs","%Median income HHs",
"%Self-employed","%Social grade C1","%more than 3 bed rooms","HHs with 1 vehicle","HHs with more than 3 vehicles")
coef.all<-union_all(coef.g1,coef.g2);coef.all<-union_all(coef.all,coef.g3);coef.all<-union_all(coef.all,coef.g4)
coef.all$name<-factor(coef.all$name)
levels(coef.all$name)
levels(coef.all$name)<-c("Constant","North East","Yorkshire and the Humber","East Midlands","West Midlands",
"East of England","London","South West","Cum. COVID-19 infection rates","Cum. COVID-19 moratlity rates", "%African","%Caribbean","%Other Asian","Hospitals","%High income HHs","%Median income HHs",
"%Self-employed","%Social grade C1","%more than 3 bed rooms","HHs with 1 vehicle","HHs with more than 3 vehicles")
require(forcats)
coef.all$name2<
coef.all
coef.all$name2<-fct_relevel(coef.all$name,"Constant","North East","Yorkshire and the Humber","East Midlands","West Midlands",
"East of England","London","South West","Cum. COVID-19 infection rates","Cum. COVID-19 moratlity rates", "%African","%Caribbean","%Other Asian","Hospitals","%High income HHs","%Median income HHs",
"%Self-employed","%Social grade C1","%more than 3 bed rooms","HHs with 1 vehicle","HHs with more than 3 vehicles")
write.csv(coef.all,"lasso.estimated.coefficients.13Jul2023.csv")
getwd()
best_lambda_lasso<-min(lasso.cvfit.re$lambda.min)
plot.std.coefficient<- ggplot(data = coef.all) +
geom_col(aes(x = coefficient, y = forcats::fct_rev(factor(name2)), fill = {coefficient > 0})) +
scale_fill_manual(values=c("blue", "red")) +
theme_bw()+
ggtitle(expression(paste("Estimated coefficients"))) +
xlab("Std.Coef.")+ylab("Predictors")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + facet_grid(~group)
plot.std.coefficient
ggsave("lasso.mnl.std.coefficient.re.13Jul2023.png",plot.std.coefficient,width=200, height=200, units = "mm", dpi = 300, bg = "white")
caret::getModelInfo("glmnet")$glmnet$varImp
varImp <- function(object, lambda = NULL, ...) {
## skipping a few lines
beta <- predict(object, s = lambda, type = "coef")
if(is.list(beta)) {
out <- do.call("cbind", lapply(beta, function(x) x[,1]))
out <- as.data.frame(out, stringsAsFactors = TRUE)
} else out <- data.frame(Overall = beta[,1])
out <- abs(out[rownames(out) != "(Intercept)",,drop = FALSE])
out
}
rel.importance<-varImp(lasso.cvfit.re, lambda = lasso.cvfit.re$lambda.min,scale=TRUE)
rel.importance$name<-dimnames(rel.importance)[[1]]
rel.inportance
rel.importance
colnames(rel.importance)<-c("G1","G2","G3","G4","Feature")
rel.importance.trans<-melt(rel.importance,value.name="importance",value.var="Feature",variable.name="group")
rel.importance<-varImp(lasso.cvfit.re, lambda = lasso.cvfit.re$lambda.min,scale=TRUE)
rel.importance$name<-dimnames(rel.importance)[[1]]
colnames(rel.importance)<-c("G1","G2","G3","G4","Feature")
require(reshape2)
rel.importance.trans<-melt(rel.importance,value.name="importance",value.var="Feature",variable.name="group")
rel.importance.trans$Feature<-as.factor(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)<-c("North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates", "%African","%Bangladeshi","%Caribbean","%Chinese","%Indian","%Mixed","%Other ethnic group","%Other Asian","%Other Black","%Pakistani","%White","%Full-time worker", "%Bad heath" , "%Fair health", "%Good Health" , "Hospitals" , "%Low income HHs", "%High income HHs", "%Median income HHs", "Supermarkets","%No education","%Non-English speakers","Parks", "%Part-time worker","Residential population density", "%Self-employed", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE", "%Social rent", "%more than 3 beds","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs")
rel.importance.trans<-subset(rel.importance.trans,importance>0)
rel.importance.trans
levels(rel.importance.trans$Feature)
?fct_relevel
rel.importance.trans$Feature2<-fct_relevel(rel.importance.trans$Feature,"North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","%Low income HHs","%Median income HHs","%High income HHs","%No education","%Non-English speakers", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE","%Social rent","%more than 3 beds","Residential population density","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs","Hospitals","Parks","Supermarkets", "%Part-time worker","%Full-time worker","%Self-employed", "%Good Health","%Fair health", "%Bad heath","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates","%White", "%Mixed","%Indian","%Pakistani","%Bangladeshi","%Chinese","%Other Asian","%African","%Caribbean","%Other Black","%Other ethnic group")
plot.rank.features<- ggplot(data = rel.importance.trans) +
geom_col(aes(x = importance, y = forcats::fct_rev(factor(Feature2)), fill = {importance > 0})) +
#scale_fill_manual(values=c("blue", "red")) +
ggtitle(expression(paste("Ranking the features (0 to 1)"))) +
ylab("Feature importance")+
theme_bw()+
scale_fill_manual(values="gray40")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + facet_grid(~group)
plot.rank.features
ggsave("lasso.mnl.rank.features.no.scale.13Jul2023.png",plot.rank.features,width=200, height=200, units = "mm", dpi = 300, bg = "white")
plot.rank.features
ggsave("lasso.mnl.rank.features.no.scale.13Jul2023.png",plot.rank.features,width=200, height=200, units = "mm", dpi = 300, bg = "white")
write.csv(rel.importance,"rel.importance.feature.selection.no.scale.13Jul2023.csv")
ggplot(data=input.eigen.before.en.ep.data,aes(x=CLU, y=cum.mortality.rates,fill=CLU))+  geom_boxplot(alpha=0.8)+labs(x="Latent temporal clusters by the changes in mobility ",y="Cumulative COVID-19 mortality rates per 100k resident population before 1st lockdown",fill="Cluster",face="bold")
y_pred_coeff_update <- predict(lasso.cvfit.re, s="lambda.min", type="coefficients")
y_multi_pred_class_update <- as.numeric(predict(lasso.fit.re, newx = x.update, type = "class",s=lasso.cvfit.re$lambda.min))
y_multi_pred_class_update <- as.numeric(predict(lasso.fit.re, newx = x.update.bin, type = "class",s=lasso.cvfit.re$lambda.min))
xtabs(~ y_multi_pred_class_update + y)
mean(y == y_multi_pred_class_update) #68.6% accurancy
sqrt(lasso.cvfit.re$cvm[lasso.cvfit.re$lambda == lasso.cvfit.re$lambda.min])
sqrt(lasso.cvfit.re$cvm[lasso.cvfit.re$lambda == lasso.cvfit.re$lambda.1se])
##Get AIC and BIC value for MNL Lasso model
print(glmnet_cv_aicc(lasso.cvfit.re))
rel.importance<-varImp(lasso.cvfit.re, lambda = lasso.cvfit.re$lambda.min,scale=TRUE)
rel.importance$name<-dimnames(rel.importance)[[1]]
colnames(rel.importance)<-c("G1","G2","G3","G4","Feature")
require(reshape2)
rel.importance.trans<-melt(rel.importance,value.name="importance",value.var="Feature",variable.name="group")
rel.importance.trans$Feature<-as.factor(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)<-c("North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates", "%African","%Bangladeshi","%Caribbean","%Chinese","%Indian","%Mixed","%Other ethnic group","%Other Asian","%Other Black","%Pakistani","%White","%Full-time worker", "%Bad heath" , "%Fair health", "%Good Health" , "Hospitals" , "%Low income HHs", "%High income HHs", "%Median income HHs", "Supermarkets","%No education","%Non-English speakers","Parks", "%Part-time worker","Residential population density", "%Self-employed", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE", "%Social rent", "%more than 3 beds","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs")
rel.importance.trans<-subset(rel.importance.trans,importance>0)
rel.importance.trans$Feature2<-fct_relevel(rel.importance.trans$Feature,"North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","%Low income HHs","%Median income HHs","%High income HHs","%No education","%Non-English speakers", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE","%Social rent","%more than 3 beds","Residential population density","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs","Hospitals","Parks","Supermarkets", "%Part-time worker","%Full-time worker","%Self-employed", "%Good Health","%Fair health", "%Bad heath","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates","%White", "%Mixed","%Indian","%Pakistani","%Bangladeshi","%Chinese","%Other Asian","%African","%Caribbean","%Other Black","%Other ethnic group")
plot.rank.features<- ggplot(data = rel.importance.trans) +
geom_col(aes(x = importance, y = forcats::fct_rev(factor(Feature2)), fill = {importance > 0})) +
#scale_fill_manual(values=c("blue", "red")) +
ggtitle(expression(paste("Ranking the features (0 to 1)"))) +
ylab("Feature importance")+
theme_bw()+
scale_fill_manual(values="gray40")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + facet_grid(~group)
plot.rank.features
ggsave("lasso.mnl.rank.features.no.scale.13Jul2023.png",plot.rank.features,width=200, height=200, units = "mm", dpi = 300, bg = "white")
rel.importance<-varImp(lasso.cvfit.re, lambda = lasso.cvfit.re$lambda.min,scale=FALSE)
rel.importance$name<-dimnames(rel.importance)[[1]]
colnames(rel.importance)<-c("G1","G2","G3","G4","Feature")
require(reshape2)
rel.importance.trans<-melt(rel.importance,value.name="importance",value.var="Feature",variable.name="group")
rel.importance.trans$Feature<-as.factor(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)<-c("North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates", "%African","%Bangladeshi","%Caribbean","%Chinese","%Indian","%Mixed","%Other ethnic group","%Other Asian","%Other Black","%Pakistani","%White","%Full-time worker", "%Bad heath" , "%Fair health", "%Good Health" , "Hospitals" , "%Low income HHs", "%High income HHs", "%Median income HHs", "Supermarkets","%No education","%Non-English speakers","Parks", "%Part-time worker","Residential population density", "%Self-employed", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE", "%Social rent", "%more than 3 beds","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs")
rel.importance.trans<-subset(rel.importance.trans,importance>0)
rel.importance.trans$Feature2<-fct_relevel(rel.importance.trans$Feature,"North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","%Low income HHs","%Median income HHs","%High income HHs","%No education","%Non-English speakers", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE","%Social rent","%more than 3 beds","Residential population density","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs","Hospitals","Parks","Supermarkets", "%Part-time worker","%Full-time worker","%Self-employed", "%Good Health","%Fair health", "%Bad heath","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates","%White", "%Mixed","%Indian","%Pakistani","%Bangladeshi","%Chinese","%Other Asian","%African","%Caribbean","%Other Black","%Other ethnic group")
plot.rank.features<- ggplot(data = rel.importance.trans) +
geom_col(aes(x = importance, y = forcats::fct_rev(factor(Feature2)), fill = {importance > 0})) +
#scale_fill_manual(values=c("blue", "red")) +
ggtitle(expression(paste("Ranking the features (0 to 1)"))) +
ylab("Feature importance")+
theme_bw()+
scale_fill_manual(values="gray40")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + facet_grid(~group)
plot.rank.features
ggsave("lasso.mnl.rank.features.no.scale.13Jul2023.png",plot.rank.features,width=200, height=200, units = "mm", dpi = 300, bg = "white")
plot.rank.features
rel.importance<-varImp(lasso.cvfit.re, lambda = lasso.cvfit.re$lambda.min,scale=TRUE)
rel.importance$name<-dimnames(rel.importance)[[1]]
colnames(rel.importance)<-c("G1","G2","G3","G4","Feature")
require(reshape2)
rel.importance.trans<-melt(rel.importance,value.name="importance",value.var="Feature",variable.name="group")
rel.importance.trans$Feature<-as.factor(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)<-c("North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates", "%African","%Bangladeshi","%Caribbean","%Chinese","%Indian","%Mixed","%Other ethnic group","%Other Asian","%Other Black","%Pakistani","%White","%Full-time worker", "%Bad heath" , "%Fair health", "%Good Health" , "Hospitals" , "%Low income HHs", "%High income HHs", "%Median income HHs", "Supermarkets","%No education","%Non-English speakers","Parks", "%Part-time worker","Residential population density", "%Self-employed", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE", "%Social rent", "%more than 3 beds","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs")
rel.importance.trans<-subset(rel.importance.trans,importance>0)
rel.importance.trans$Feature2<-fct_relevel(rel.importance.trans$Feature,"North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","%Low income HHs","%Median income HHs","%High income HHs","%No education","%Non-English speakers", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE","%Social rent","%more than 3 beds","Residential population density","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs","Hospitals","Parks","Supermarkets", "%Part-time worker","%Full-time worker","%Self-employed", "%Good Health","%Fair health", "%Bad heath","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates","%White", "%Mixed","%Indian","%Pakistani","%Bangladeshi","%Chinese","%Other Asian","%African","%Caribbean","%Other Black","%Other ethnic group")
plot.rank.features<- ggplot(data = rel.importance.trans) +
geom_col(aes(x = importance, y = forcats::fct_rev(factor(Feature2)), fill = {importance > 0})) +
#scale_fill_manual(values=c("blue", "red")) +
ggtitle(expression(paste("Ranking the features (0 to 1)"))) +
ylab("Feature importance")+
theme_bw()+
scale_fill_manual(values="gray40")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + facet_grid(~group)
plot.rank.features
ggsave("lasso.mnl.rank.features.no.scale.13Jul2023.png",plot.rank.features,width=200, height=200, units = "mm", dpi = 300, bg = "white")
write.csv(rel.importance,"rel.importance.feature.selection.no.scale.13Jul2023.csv")
ggplot(data=input.eigen.before.en.ep.data,aes(x=CLU, y=cum.mortality.rates,fill=CLU))+  geom_boxplot(alpha=0.8)+labs(x="Latent temporal clusters by the changes in mobility ",y="Cumulative COVID-19 mortality rates per 100k resident population before 1st lockdown",fill="Cluster",face="bold")
y_pred_coeff_update <- predict(lasso.cvfit.re, s="lambda.min", type="coefficients")
y_multi_pred_class_update <- as.numeric(predict(lasso.fit.re, newx = x.update.bin, type = "class",s=lasso.cvfit.re$lambda.min))
xtabs(~ y_multi_pred_class_update + y)
mean(y == y_multi_pred_class_update) #68.6% accurancy
sqrt(lasso.cvfit.re$cvm[lasso.cvfit.re$lambda == lasso.cvfit.re$lambda.min])
sqrt(lasso.cvfit.re$cvm[lasso.cvfit.re$lambda == lasso.cvfit.re$lambda.1se])
##Get AIC and BIC value for MNL Lasso model
print(glmnet_cv_aicc(lasso.cvfit.re))
##Get AIC and BIC value for MNL Lasso model
print(glmnet_cv_aicc(lasso.cvfit.re))
ggplot(data=input.eigen.before.en.ep.data,aes(x=CLU, y=cum.mortality.rates,fill=CLU))+  geom_boxplot(alpha=0.8)+labs(x="Latent temporal clusters by the changes in mobility ",y="Cumulative COVID-19 mortality rates per 100k resident population before 1st lockdown",fill="Cluster",face="bold")
y_pred_coeff_update <- predict(lasso.cvfit.re, s="lambda.min", type="coefficients")
t
xtabs(~ y_multi_pred_class_update + y)
mean(y == y_multi_pred_class_update) #68.6% accurancy
y_pred_coeff_update <- predict(lasso.cvfit.re, s="lambda.min", type="coefficients")
y_multi_pred_class_update <- as.numeric(predict(lasso.fit.re, newx = x.update.bin, type = "class",s=lasso.cvfit.re$lambda.min))
xtabs(~ y_multi_pred_class_update + y)
mean(y == y_multi_pred_class_update) #68.6% accurancy
y_pred_coeff_update <- predict(lasso.cvfit.re, s="lambda.min", type="coefficients")
y_multi_pred_class_update <- as.numeric(predict(lasso.fit.re, newx = x.update.bin, type = "class",s=lasso.cvfit.re$lambda.min))
xtabs(~ y_multi_pred_class_update + y)
mean(y == y_multi_pred_class_update) #68.6% accurancy
y_multi_pred_class
y_pred_coeff
y_pred_coeff_update <- predict(lasso.cvfit.re, s="lambda.min", type="coefficients")
y_multi_pred_class_update <- as.numeric(predict(lasso.fit.re, newx = x.update.bin, type = "class",s=lasso.cvfit.re$lambda.min))
lasso.cvfit.re
lasso.cvfit.re$lambda.min
y_multi_pred_class_update
y_multi_pred_class
x.update.bin
y_pred_coeff_update <- predict(lasso.cvfit.re, s="lambda.min", type="coefficients")
y_multi_pred_class_update <- as.numeric(predict(lasso.fit.re, newx = x.update.bin, type = "class",s=lasso.cvfit.re$lambda.min))
xtabs(~ y_multi_pred_class_update + y)
mean(y == y_multi_pred_class_update) #68.6% accurancy
sqrt(lasso.cvfit.re$cvm[lasso.cvfit.re$lambda == lasso.cvfit.re$lambda.min])
sqrt(lasso.cvfit.re$cvm[lasso.cvfit.re$lambda == lasso.cvfit.re$lambda.1se])
##Get AIC and BIC value for MNL Lasso model
print(glmnet_cv_aicc(lasso.cvfit.re))
lasso.cvfit.re$glmnet.fit
lasso.cvfit.re$index
?varImp
lasso.cvfit.re$glmnet$varImp
lasso.cvfit.re$glmnet$grouped
lasso.cvfit.re$glmnet$dfmat
lasso.cvfit.re$glmnet$offset
vip(lasso.cvfit.re$glmnet.fit)
best_lambda_lasso<-min(lasso.cvfit.re$lambda.min)
best_lambda_lasso
rel.importance<-varImp(lasso.cvfit.re, lambda = best_lambda_lasso,scale=TRUE)
rel.importance$name<-dimnames(rel.importance)[[1]]
colnames(rel.importance)<-c("G1","G2","G3","G4","Feature")
require(reshape2)
rel.importance.trans<-melt(rel.importance,value.name="importance",value.var="Feature",variable.name="group")
rel.importance.trans$Feature<-as.factor(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)<-c("North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates", "%African","%Bangladeshi","%Caribbean","%Chinese","%Indian","%Mixed","%Other ethnic group","%Other Asian","%Other Black","%Pakistani","%White","%Full-time worker", "%Bad heath" , "%Fair health", "%Good Health" , "Hospitals" , "%Low income HHs", "%High income HHs", "%Median income HHs", "Supermarkets","%No education","%Non-English speakers","Parks", "%Part-time worker","Residential population density", "%Self-employed", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE", "%Social rent", "%more than 3 beds","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs")
rel.importance.trans<-subset(rel.importance.trans,importance>0)
rel.importance.trans$Feature2<-fct_relevel(rel.importance.trans$Feature,"North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","%Low income HHs","%Median income HHs","%High income HHs","%No education","%Non-English speakers", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE","%Social rent","%more than 3 beds","Residential population density","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs","Hospitals","Parks","Supermarkets", "%Part-time worker","%Full-time worker","%Self-employed", "%Good Health","%Fair health", "%Bad heath","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates","%White", "%Mixed","%Indian","%Pakistani","%Bangladeshi","%Chinese","%Other Asian","%African","%Caribbean","%Other Black","%Other ethnic group")
plot.rank.features<- ggplot(data = rel.importance.trans) +
geom_col(aes(x = importance, y = forcats::fct_rev(factor(Feature2)), fill = {importance > 0})) +
#scale_fill_manual(values=c("blue", "red")) +
ggtitle(expression(paste("Ranking the features (0 to 1)"))) +
ylab("Feature importance")+
theme_bw()+
scale_fill_manual(values="gray40")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + facet_grid(~group)
plot.rank.features
ggsave("lasso.mnl.rank.features.no.scale.13Jul2023.png",plot.rank.features,width=200, height=200, units = "mm", dpi = 300, bg = "white")
test<-varImp(lasso.cvfit.re,scale=FALSE)
test<-varImp(lasso.cvfit.re,scale=FALSE)
test<-varImp(lasso.cvfit.re,lambda = best_lambda_lasso,scale=FALSE)
test
test<-varImp(lasso.cvfit.re,lambda = best_lambda_lasso,scale=TRUE)
test
sds <- apply(x.update.bin, 2, sd)
cs <- as.matrix(coef(lasso.cvfit.re, s = "lambda.min"))
std_coefs <- coefs[-1, 1] * sds
coef(lasso.cvfit.re$glmnet.fit,s=lasso.cvfit.re$lambda.1se)
std_coefs <- coefs[-1, 1] * sds
coef(lasso.cvfit.re$glmnet.fit,s=lasso.cvfit.re$lambda.1se)
coef<-coef(lasso.cvfit.re$glmnet.fit,s=lasso.cvfit.re$lambda.1se)
std_coefs <- coefs[-1, 1] * sds
coef<-coef(lasso.cvfit.re$glmnet.fit,s=lasso.cvfit.re$lambda.1se)
std_coefs <- coefs[-1, 1] * sds
coefs<-coef(lasso.cvfit.re$glmnet.fit,s=lasso.cvfit.re$lambda.1se)
std_coefs <- coefs[-1, 1] * sds
coef
coefList <- coef(lasso.cvfit.re, s='lambda.1se')
coefList <- data.frame(lasso.cvfit.re@Dimnames[[1]][coefList@i+1],coefList@x)
coefList <- data.frame(coefList@Dimnames[[1]][coefList@i+1],coefList@x)
coefList <- coef(lasso.cvfit.re, s='lambda.1se')
coefList <- data.frame(coefList@Dimnames[[1]][coefList@i+1],coefList@x)
coefList
install.packages("vip")
rel.importance<-varImp(lasso.cvfit.re, lambda = best_lambda_lasso)
rel.importance$name<-dimnames(rel.importance)[[1]]
colnames(rel.importance)<-c("G1","G2","G3","G4","Feature")
require(reshape2)
rel.importance.trans<-melt(rel.importance,value.name="importance",value.var="Feature",variable.name="group")
rel.importance.trans$Feature<-as.factor(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)
levels(rel.importance.trans$Feature)<-c("North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates", "%African","%Bangladeshi","%Caribbean","%Chinese","%Indian","%Mixed","%Other ethnic group","%Other Asian","%Other Black","%Pakistani","%White","%Full-time worker", "%Bad heath" , "%Fair health", "%Good Health" , "Hospitals" , "%Low income HHs", "%High income HHs", "%Median income HHs", "Supermarkets","%No education","%Non-English speakers","Parks", "%Part-time worker","Residential population density", "%Self-employed", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE", "%Social rent", "%more than 3 beds","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs")
rel.importance.trans<-subset(rel.importance.trans,importance>0)
rel.importance.trans$Feature2<-fct_relevel(rel.importance.trans$Feature,"North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East of England","London","South East","South West","%Low income HHs","%Median income HHs","%High income HHs","%No education","%Non-English speakers", "%Social grade AB","%Social grade C1", "%Social Grade C2","%Social grade DE","%Social rent","%more than 3 beds","Residential population density","No vehicle in HHs", "1 vehicle in HHs","2 vehicles in HHs","more than 3 vehicles in HHs","Hospitals","Parks","Supermarkets", "%Part-time worker","%Full-time worker","%Self-employed", "%Good Health","%Fair health", "%Bad heath","Cumulative COVID-19 infection rates","Cumulative COVID-19 mortality rates","%White", "%Mixed","%Indian","%Pakistani","%Bangladeshi","%Chinese","%Other Asian","%African","%Caribbean","%Other Black","%Other ethnic group")
plot.rank.features<- ggplot(data = rel.importance.trans) +
geom_col(aes(x = importance, y = forcats::fct_rev(factor(Feature2)), fill = {importance > 0})) +
#scale_fill_manual(values=c("blue", "red")) +
ggtitle(expression(paste("Ranking the features (0 to 1)"))) +
ylab("Feature importance")+
theme_bw()+
scale_fill_manual(values="gray40")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + facet_grid(~group)
plot.rank.features
ggsave("lasso.mnl.rank.features.no.scale.13Jul2023.png",plot.rank.features,width=200, height=200, units = "mm", dpi = 300, bg = "white")
write.csv(rel.importance,"rel.importance.feature.selection.no.scale.13Jul2023.csv")
require(vip)
vip::vi_model(lasso.cvfit.re, s = lasso.cvfit.re$fit$lambda)
rel.imp.re<-vip::vi_model(lasso.cvfit.re, s = lasso.cvfit.re$fit$lambda)
rel.imp.re
View(rel.imp.re)
##Get AIC and BIC value for MNL Lasso model
print(glmnet_cv_aicc(lasso.cvfit.re))
